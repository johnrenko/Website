---
import "../styles/global.css";
const { title = 'John Dutamby — Portfolio', description = 'Product Designer & PM' } = Astro.props as { title?: string; description?: string };
---
<!DOCTYPE html>
<html lang="fr">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="description" content={description} />
    <link rel="icon" href="/favicon.ico" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400&family=Roboto:wght@400&family=Playfair+Display:wght@400&family=Lora:wght@400&family=Poppins:wght@400&family=Space+Mono:wght@400&family=Ovo&display=swap" rel="stylesheet" />
    <title>{title}</title>
  </head>
  <body class="min-h-screen">
    <div class="wip-banner" data-wip-banner>
      <div class="wip-banner__inner">
        <span class="wip-banner__icon" aria-hidden="true"></span>
        <span class="wip-banner__text">Work In Progress</span>
        <span class="wip-banner__sub">Please come back later — things are being built!</span>
        <button class="wip-banner__close" type="button" aria-label="Dismiss work in progress banner" data-wip-close>Close</button>
      </div>
    </div>
    <main class="mx-auto max-w-8xl px-6 py-10 overflow-hidden">
      <slot />
    </main>
    <script>
      // Persist dismissal for current browser using localStorage
      (function() {
        try {
          var key = 'wipBannerDismissed';
          var container = document.querySelector('[data-wip-banner]');
          if (!container) return;
          if (localStorage.getItem(key) === 'true') {
            container.parentNode && container.parentNode.removeChild(container);
            return;
          }
          var btn = container.querySelector('[data-wip-close]');
          if (btn) {
            btn.addEventListener('click', function() {
              localStorage.setItem(key, 'true');
              container.parentNode && container.parentNode.removeChild(container);
            });
          }
        } catch (e) {
          // If storage unavailable, still allow dismiss for this session
          var c = document.querySelector('[data-wip-banner]');
          var b = c && c.querySelector('[data-wip-close]');
          b && b.addEventListener('click', function() {
            c.parentNode && c.parentNode.removeChild(c);
          });
        }
      })();
    </script>
    <script>
      // Save and restore scroll position per path within the same tab
      (function() {
        try {
          var key = 'scroll:' + location.pathname;
          var saved = sessionStorage.getItem(key);
          if (saved) {
            var y = parseInt(saved, 10);
            if (!isNaN(y)) {
              // Use requestAnimationFrame to ensure layout is ready
              requestAnimationFrame(function() { window.scrollTo(0, y); });
            }
            sessionStorage.removeItem(key);
          }
          // pagehide works with BFCache; fallback to beforeunload
          var handler = function() {
            try {
              sessionStorage.setItem(key, String(window.scrollY || window.pageYOffset || 0));
            } catch (e) {}
          };
          window.addEventListener('pagehide', handler, { capture: true });
          window.addEventListener('beforeunload', handler, { capture: true });
        } catch (e) {}
      })();
    </script>
  </body>
  
</html>


