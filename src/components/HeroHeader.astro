---
const { name = 'JOHN DUTAMBY' } = Astro.props as { name?: string };
const tagline = 'Votre prochain founding designer';
const taglineWords = tagline.split(' ');
---
<section class="mb-16" style="height: 50vh;">
  <div class="relative left-1/2 right-1/2 -ml-[50vw] -mr-[50vw] w-screen overflow-visible">
    <h1
      id="hero-title"
      class="hero-title font-display text-[18vw] md:text-[12vw] leading-none tracking-tight uppercase select-none whitespace-nowrap"
      aria-label={name}
      style="position: absolute; top: -90px; left: -30px;"
    >
      {name}
    </h1>
  </div>
  <div class="flex items-center justify-center mt-6 px-4" style="height: 100%;">
    <h2
      class="font-serif text-center tagline responsive-tagline"
      style="font-family: 'Ovo', serif; cursor: url('/images/cursor/wand.svg') 6 6, auto;"
      aria-label={tagline}
    >
      {taglineWords.map((word, wi) => (
        <span class="tagline-word inline-block">
          {Array.from(word).map((c, ci) => (
            <span class="tagline-letter inline-block" data-index={`${wi}-${ci}`}>{c}</span>
          ))}
        </span>
      )).reduce((acc, wordEl, idx) => idx === 0 ? [wordEl] : acc.concat([<span class="tagline-space" aria-hidden="true">&nbsp;</span>, wordEl]), [])}
    </h2>
  </div>
</section>

<style>
  /* Animateable custom properties for radial reveal */
  @property --x { syntax: '<length>'; initial-value: 50%; inherits: false; }
  @property --y { syntax: '<length>'; initial-value: 50%; inherits: false; }
  @property --r { syntax: '<length>'; initial-value: 0px; inherits: false; }

  .hero-title {
    /* Base colors and reveal gradient */
    --accent: #ec4899; /* pink-500 */
    /* Ensure variables have defaults even if @property is unsupported */
    --x: 50%;
    --y: 50%;
    --r: 0px;
    background-image: radial-gradient(circle at var(--x, 50%) var(--y, 50%), var(--accent) 0, var(--accent) var(--r, 0px), #000 calc(var(--r, 0px) + 1px));
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
    transition: --r 9000ms ease-in-out;
  }
  .hero-title:hover { --r: 1400px; }
  .tagline-letter { transition: transform 120ms ease-in-out; }
  .tagline-letter:hover { transform: translateY(-2px); }
  .tagline-word { white-space: nowrap; }
  .tagline-space { display: inline; }
  
  /* Responsive tagline styling */
  .responsive-tagline {
    font-size: clamp(2rem, 8vw, 5rem);
    line-height: 1.1;
    max-width: 90vw;
    word-wrap: break-word;
    hyphens: auto;
  }
  
  /* Allow wrapping on smaller screens */
  @media (max-width: 768px) {
    .responsive-tagline {
      white-space: normal;
      word-break: keep-all;
    }
  }
  
  /* Keep single line on larger screens */
  @media (min-width: 769px) {
    .responsive-tagline {
      white-space: nowrap;
    }
  }
</style>

<script>
  const title = document.getElementById('hero-title');
  if (title) {
    const update = (ev) => {
      const rect = title.getBoundingClientRect();
      const x = ev.clientX - rect.left;
      const y = ev.clientY - rect.top;
      title.style.setProperty('--x', x + 'px');
      title.style.setProperty('--y', y + 'px');
    };
    title.addEventListener('pointermove', update);
    title.addEventListener('pointerenter', update);
  }

  // Random Google font per-letter hover for tagline
  const candidateFonts = [
    'Inter',
    'Roboto',
    'Playfair Display',
    'Lora',
    'Poppins',
    'Space Mono'
  ];
  const letters = document.querySelectorAll('.tagline-letter');
  function pickRandomFont() {
    const idx = Math.floor(Math.random() * candidateFonts.length);
    return candidateFonts[idx];
  }
  letters.forEach((el) => {
    el.addEventListener('mouseenter', () => {
      const f = pickRandomFont();
      const fallback = f === 'Space Mono' ? 'monospace' : 'serif';
      el.style.fontFamily = `'${f}', ${fallback}`;
    });
  });
</script>


