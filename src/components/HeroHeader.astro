---
import { t } from '../i18n/t.js';
import type { Locale } from '../i18n/config.js';

const { name = 'JOHN DUTAMBY', locale = 'en' } = Astro.props as { name?: string; locale?: Locale };
const tagline = t('home.tagline', locale);
const taglineChars = Array.from(tagline);
---
<section class="mb-16" style="height: 50vh;">
  <div class="relative left-1/2 right-1/2 -ml-[50vw] -mr-[50vw] w-screen overflow-visible">
    <h1
      id="hero-title"
      class="hero-title font-display text-[18vw] md:text-[12vw] leading-none tracking-tight uppercase select-none whitespace-nowrap"
      aria-label={name}
      style="position: absolute; top: -90px; left: -30px;"
    >
      {name}
    </h1>
  </div>
  <div class="flex items-center justify-center mt-6" style="height: 100%;">
    <h2
      class="font-serif text-center tagline"
      style="font-family: 'Ovo', serif; font-size: 80px; line-height: 1;"
      aria-label={tagline}
    >
      {taglineChars.map((c, i) => (
        <span class="tagline-letter inline-block" data-index={i}>{c === ' ' ? '\u00A0' : c}</span>
      ))}
    </h2>
  </div>
</section>

<style>
  /* Animateable custom properties for radial reveal */
  @property --x { syntax: '<length>'; initial-value: 50%; inherits: false; }
  @property --y { syntax: '<length>'; initial-value: 50%; inherits: false; }
  @property --r { syntax: '<length>'; initial-value: 0px; inherits: false; }

  .hero-title {
    /* Base colors and reveal gradient */
    --accent: #ec4899; /* pink-500 */
    /* Ensure variables have defaults even if @property is unsupported */
    --x: 50%;
    --y: 50%;
    --r: 0px;
    background-image: radial-gradient(circle at var(--x, 50%) var(--y, 50%), var(--accent) 0, var(--accent) var(--r, 0px), #000 calc(var(--r, 0px) + 1px));
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
    transition: --r 9000ms ease-in-out;
  }
  .hero-title:hover { --r: 1400px; }
  .tagline-letter { transition: transform 120ms ease-in-out; }
  .tagline-letter:hover { transform: translateY(-2px); }
  .tagline { white-space: nowrap; cursor: url('/images/cursor/wand.svg') 6 6, auto; }
</style>

<script>
  const title = document.getElementById('hero-title');
  if (title) {
    const update = (ev) => {
      const rect = title.getBoundingClientRect();
      const x = ev.clientX - rect.left;
      const y = ev.clientY - rect.top;
      title.style.setProperty('--x', x + 'px');
      title.style.setProperty('--y', y + 'px');
    };
    title.addEventListener('pointermove', update);
    title.addEventListener('pointerenter', update);
  }

  // Random Google font per-letter hover for tagline
  const candidateFonts = [
    'Inter',
    'Roboto',
    'Playfair Display',
    'Lora',
    'Poppins',
    'Space Mono'
  ];
  const letters = document.querySelectorAll('.tagline-letter');
  function pickRandomFont() {
    const idx = Math.floor(Math.random() * candidateFonts.length);
    return candidateFonts[idx];
  }
  letters.forEach((el) => {
    el.addEventListener('mouseenter', () => {
      const f = pickRandomFont();
      const fallback = f === 'Space Mono' ? 'monospace' : 'serif';
      el.style.fontFamily = `'${f}', ${fallback}`;
    });
  });
</script>


